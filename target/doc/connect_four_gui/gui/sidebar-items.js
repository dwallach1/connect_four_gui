initSidebarItems({"enum":[["Player",""]],"fn":[["build_game_window","Builds game window with ConnectK board and play game button."],["build_selection_game_window","Builds the parts of the GUI that allows user to select a game and create a game. Only games that can be joined are displayed."],["connect_to_server","Connects to game server to get information about current, joinable games. # Examples ``` let ip_address = \"127.0.0.1:8080\"; if let Some(game_ids) = connect_to_server(&ip_address) {    // succesfully connected to server  // use game_ids accordingly } ```"],["get_game","Gets game info from game server for specified game_id. # Examples ``` let ip_address = \"127.0.0.1:8080\"; let game_id = \"0\"; let game_info_req = get_game(&game_id, &ip_address); //get resulting JSON if let Some(game_info) = game_info_req {  let game_value: Value = from_reader(game_info).expect(\"Unable to parse response!\"); } ```"],["launch","Launches game GUI."],["play_move","Plays the move specified by user. Returns the board (string) of the updated board. # Examples ``` //3x3 empty board = \"000000000\" let new_board = play_move(0, CURRENT_GAME_ID, 127.0.0.1:8080); //board = \"100000000\" ```"],["poll_server","Sends requests to game server for specified game to determine whether opposing player has made a move. # Examples ``` let game_id = 0; let ip_address = \"127.0.0.1:8080\"; // 3x3 empty board = \"000000000\" if poll_server(game_id, &ip_address, board) {    // other player has completed their turn, respond accordingly    } ```"],["update_board_gui","Updates the board GUI based on current board state."]]});